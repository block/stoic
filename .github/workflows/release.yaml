name: release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v5

      - name: Read version
        id: version
        run: echo "version=$(cat prebuilt/STOIC_VERSION)" >> $GITHUB_OUTPUT

      - name: Verify tag matches STOIC_VERSION
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          FILE_VERSION="${{ steps.version.outputs.version }}"
          echo "Tag version: $TAG_VERSION"
          echo "File version: $FILE_VERSION"

          # Allow mismatch only if tag is 'main' and file version ends with '-SNAPSHOT'
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            if [ "$TAG_VERSION" = "main" ] && [[ "$FILE_VERSION" == *-SNAPSHOT ]]; then
              echo "✅ Tag is 'main' and file version ends with '-SNAPSHOT'; skipping strict check."
            else
              echo "❌ Tag ($TAG_VERSION) does not match STOIC_VERSION ($FILE_VERSION)"
              exit 1
            fi
          fi

      - name: Find latest successful build artifact for this commit
        id: find-build
        run: |
          echo "Fetching build for commit $GITHUB_SHA"
          BUILD_RUN_ID=$(gh run list --workflow build --json headSha,databaseId,status,conclusion \
            | jq -r '.[] | select(.headSha=="'$GITHUB_SHA'" and .conclusion=="success") | .databaseId' | head -n1)
          if [ -z "$BUILD_RUN_ID" ]; then
            echo "No successful 'build' run found for commit $GITHUB_SHA"
            exit 1
          fi
          echo "Using build $BUILD_RUN_ID for commit $GITHUB_SHA"
          echo "BUILD_RUN_ID=$BUILD_RUN_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        run: |
          gh run download ${{ steps.find-build.outputs.BUILD_RUN_ID }} -n stoic-release-tar-gz -D artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version-file: .github/workflows/.java-version

      - name: Extract SDK artifacts from tarball
        run: |
          tar -xzf artifacts/stoic-release.tar.gz sdk/stoic-plugin-sdk.jar sdk/stoic-app-sdk.aar

      - name: Print publishing info
        run: |
          ./gradlew :target:plugin-sdk:printPublishingInfo :target:runtime:app-sdk:printPublishingInfo

      - name: Publish plugin-sdk JAR to Maven Central
        run: |
          ./gradlew :target:plugin-sdk:publish \
            -PartifactFile=$(pwd)/sdk/stoic-plugin-sdk.jar \
            --info
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_SECRET_PASSPHRASE }}

      - name: Publish app-sdk AAR to Maven Central
        run: |
          ./gradlew :target:runtime:app-sdk:publish \
            -PartifactFile=$(pwd)/sdk/stoic-app-sdk.aar \
            --info
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_SECRET_PASSPHRASE }}

      - name: Create GitHub release
        if: ${{ !endsWith(steps.version.outputs.version, '-SNAPSHOT') }}
        run: |
          gh release create ${{ github.ref_name }} \
            artifacts/stoic-release.tar.gz \
            --title "Stoic Release ${{ steps.version.outputs.version }}" \
            --notes "Release bundle including Maven-published JAR and other artifacts."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
