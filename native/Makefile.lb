# Build libbase

LB_DIR := libbase

# Allow CXXFLAGS and CXX to be overridden
CXX ?= c++
AR ?= ar
BASE_CXXFLAGS ?= -fPIC -Wall

CXXFLAGS := $(BASE_CXXFLAGS) $(addprefix -I$(LB_DIR)/, include) -Ifmtlib/include -std=c++20 -Wno-c99-extensions
LIBS :=
SRC := $(addprefix $(LB_DIR)/, abi_compatibility.cpp chrono_utils.cpp cmsg.cpp file.cpp hex.cpp logging.cpp mapped_file.cpp parsebool.cpp parsenetaddress.cpp posix_strerror_r.cpp process.cpp properties.cpp result.cpp stringprintf.cpp strings.cpp threads.cpp test_utils.cpp)
OBJ := $(addprefix $(OUT_DIR)/, $(SRC:.cpp=.o))
TARGET := $(OUT_DIR)/$(LB_DIR)/libbase.a

.PHONY: all clean prepare

# Target to create the output directory
prepare:
	mkdir -p $(OUT_DIR)/$(LB_DIR)

# Main target depends on prepare to ensure the output directory exists
all: prepare $(TARGET)

$(TARGET): $(OBJ)
	# TODO: Figure out why this generates an empty archive file, but if I
	# don't link against it I get missing symbol errors
	$(AR) rcs $@ $(OBJ) 2>/dev/null

$(OUT_DIR)/$(LB_DIR)/%.o: $(LB_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

clean:
	rm -rf $(OUT_DIR)/$(LB_DIR)

debug:
	@echo "SRC = $(SRC)"
	@echo "OBJ = $(OBJ)"
	@echo "TARGET = $(TARGET)"
