# Build libnativehelper

LNH_DIR := libnativehelper

# Allow CFLAGS and CC to be overridden
CC ?= cc
AR ?= ar
BASE_CFLAGS ?= -fPIC -Wall

CFLAGS := $(BASE_CFLAGS) $(addprefix -I$(LNH_DIR)/, header_only_include include include_jni include_platform include_platform_header_only)
CXXFLAGS := $(LNH_CFLAGS) -std=c++17
LIBS :=
SRC := $(addprefix libnativehelper/, DlHelp.c ExpandableString.c JNIHelp.c JNIPlatformHelp.c JniConstants.c JniInvocation.c file_descriptor_jni.c)
OBJ := $(addprefix $(OUT_DIR)/, $(SRC:.c=.o))
TARGET := $(OUT_DIR)/$(LNH_DIR)/libnativehelper.a

.PHONY: all clean prepare

# Target to create the output directory
prepare:
	mkdir -p $(OUT_DIR)/$(LNH_DIR)

# Main target depends on prepare to ensure the output directory exists
all: prepare $(TARGET)

$(TARGET): $(OBJ)
	# I'm silencing a warning about no symbols being present
	# Maybe this library isn't necessary? Maybe we just need its headers?
	$(AR) rcs $@ $(OBJ) 2>/dev/null

$(STOIC_TARGET): $(STOIC_OBJ)
	$(CC) $(LDFLAGS) -o $@ $^

$(OUT_DIR)/$(LNH_DIR)/%.o: $(LNH_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OUT_DIR)
