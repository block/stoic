#!/system/bin/sh
set -eu

script_dir="$(realpath "$(dirname "$(readlink -f "$0")")")"
stoic_device_sync_dir="$(realpath "$script_dir/..")"
cd "$script_dir"

run_as_compat() {
  "$script_dir/run-as-compat" "$@"
}

monkey_package() {
  monkey --pct-syskeys 0 -p "$pkg" 1 >/dev/null 2>&1
}

start_package() {
  monkey_package
  for i in $(seq 1 5); do
    for j in $(seq 1 500); do
      if pkg_pid="$(pidof "$pkg")"; then
        return 0
      fi
    done
    >&2 "$pkg is slow to start (maybe it's stuck) - retrying monkey"
    monkey_package
  done

  >&2 "Failed to start $pkg"
  return 1
}

resolve_package_pid() {
  case "$start_option" in
    restart)
      am force-stop "$pkg"
      start_package
      ;;
    do_not_start)
      pkg_pid="$(pidof "$pkg")"
      ;;
    start_if_needed)
      if ! pkg_pid="$(pidof "$pkg")"; then
        start_package
      fi
      ;;
    *)
      echo "Invalid start option: '$start_option'" >&2
      return 1
      ;;
  esac
}

cross_uid_cp() {
  perms="$1"
  src="$2"
  dst="$3"
  cat "$src" | run_as_compat "$pkg" sh -c "cat > $dst && chmod $perms $dst"
}

wait_for_server_up_pid=""
logcat_pid=""
cleanup() {
  if [ -n "$wait_for_server_up_pid" ]; then
    kill "$wait_for_server_up_pid"
  fi
  if [ -n "$logcat_pid" ]; then
    kill "$logcat_pid"
  fi
}
trap cleanup EXIT

# The protocol version the server should expect
stoic_protocol_version="$1"

# The package we'll attach to
pkg="$2"

# Should be one of restart/start_if_needed/do_not_start
start_option="$3"

debug_option="$4"
case "$debug_option" in
  debug_true)
    debug="on"
    ;;
  debug_false)
    debug=""
    ;;
  *)
    >&2 echo "Invalid debug option '$debug_option'"
    exit 1
    ;;
esac

if [ -n "$debug" ]; then
  set -x
fi

if ! pkg_dir="$(run_as_compat "$pkg" printenv HOME)"; then
  if [ "$pkg" = "com.squareup.stoic.demoapp.withoutsdk" ]; then
    # Install and retry
    pm install "$stoic_device_sync_dir/apk/stoic-demo-app-without-sdk-debug.apk"
    pkg_dir="$(run_as_compat "$pkg" printenv HOME)"
  else
    >&2 echo "$pkg not found"
    exit 1
  fi
fi

pkg_stoic_dir="$pkg_dir/stoic"
pkg_so="$pkg_stoic_dir/stoic-jvmti-agent.so"
pkg_server_dex_jar="$pkg_stoic_dir/stoic-server-attached.dex.jar"
pkg_options_json="$pkg_stoic_dir/options.json"

# TODO: Use a lock to ensure that multiple processes aren't attempting to bring
# the server up simultaneously

>&2 echo "cleaning $pkg_stoic_dir"
run_as_compat "$pkg" rm -rf "$pkg_stoic_dir"
run_as_compat "$pkg" mkdir "$pkg_stoic_dir"
cross_uid_cp 444 "$stoic_device_sync_dir/stoic/stoic-jvmti-agent.so" "$pkg_so"
cross_uid_cp 444 "$stoic_device_sync_dir/stoic/stoic-server-attached.dex.jar" "$pkg_server_dex_jar"
echo "{\"stoicVersion\":$stoic_protocol_version}" | cross_uid_cp 444 - "$pkg_options_json"

run_as_compat "$pkg" mkfifo "$pkg_stoic_dir/server-up.fifo"
run_as_compat "$pkg" timeout 20s sh -c ": < $pkg_stoic_dir/server-up.fifo" &
wait_for_server_up_pid=$!

>&2 echo "wait_for_server_up started in background with PID $wait_for_server_up_pid"

first_pid="$(pidof "$pkg" || true)"

# Sets pkg_pid
resolve_package_pid "$pkg"

if [ "$pkg_pid" = "$first_pid" ]; then
  # Since pkg was already running, double-check /proc/pid/maps for stoic-jvmti-agent.so
  if run_as_compat "$pkg" cat /proc/$pkg_pid/maps | grep "stoic-jvmti-agent.so"; then
    >&2 echo "stoic already loaded - need to restart the process first"
    >&2 echo "consider:"
    >&2 echo "  stoic --restart ..."
    exit 1
  fi
fi

# TODO: output to temporary file
logcat -T 1 --pid "$pkg_pid" "stoic:v *:w" >&2 &
logcat_pid=$!
am attach-agent "$pkg" "$pkg_so=$pkg_stoic_dir"

>&2 echo "Waiting for wait_for_server_up to finish..."
wait_for_server_up_exit_status=0
wait $wait_for_server_up_pid || wait_for_server_up_exit_status=$?
>&2 echo "wait_for_server_up exited with $wait_for_server_up_exit_status"
wait_for_server_up_pid=""
